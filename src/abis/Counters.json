{
  "contractName": "Counters",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/libraries/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/src/contracts/libraries/Counters.sol\":{\"keccak256\":\"0x71d88eb84c777ca72b31642b88a75e10f94e43cb8d19fb2041175d2f1b215226\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c00fac0a873b480d28fd84ff1ea5207ab6bec74301da99aca96a195038b7321e\",\"dweb:/ipfs/QmSiSJBEauyHNaMh4UgPxcuUdyhTcB26Tajq3hj5qinn3p\"]},\"project:/src/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0xb999d6a1412121dd49f6e6b217a9ea1d421f9daddb850d2ad16e61e28a9bda8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://790c0637e3eb8aac28c0ce1c28084d238be5ab1bd79ff99c01777e4e355ed428\",\"dweb:/ipfs/QmW5XmXB2wUt4CuvHgEYt1G4MNVYADt6wj13eYVRoQSQuC\"]}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd2e4ba975a60d6c793bab2607d99b92498081172b2e286a39417c7f3f6b9c0064736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd2e4ba975a60d6c793bab2607d99b92498081172b2e286a39417c7f3f6b9c0064736f6c634300080f0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "665:688:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "665:688:11:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n* @title Counters\r\n* @author Matt Condon (@shrugs)\r\n* @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n* of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n*\r\n* Include with `using Counters for Counters.Counter;`\r\n* Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\r\n* overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n* directly accessed.\r\n*/\r\n\r\n\r\nlibrary Counters {\r\n\r\n    using SafeMath for uint;\r\n    \r\n    // Is a mechanism to keep track of our values of arithmetic changes to our code\r\n    struct Counter {\r\n        uint _value;\r\n    }\r\n\r\n    // We want to find the current value of a count\r\n    function current(Counter storage counter) internal view returns(uint) {\r\n        return counter._value;\r\n    }\r\n\r\n    // Function that always increments by 1\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    // Function that always decrements by 1\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.subtract(1);\r\n    }\r\n\r\n    \r\n\r\n}",
  "sourcePath": "D:\\blockchain-learning\\nft-marketplace-react\\src\\contracts\\libraries\\Counters.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/libraries/Counters.sol",
    "exportedSymbols": {
      "Counters": [
        937
      ],
      "SafeMath": [
        1073
      ]
    },
    "id": 938,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 886,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:11"
      },
      {
        "absolutePath": "project:/src/contracts/libraries/SafeMath.sol",
        "file": "./SafeMath.sol",
        "id": 887,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 938,
        "sourceUnit": 1074,
        "src": "62:24:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Counters",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 888,
          "nodeType": "StructuredDocumentation",
          "src": "90:569:11",
          "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n directly accessed."
        },
        "fullyImplemented": true,
        "id": 937,
        "linearizedBaseContracts": [
          937
        ],
        "name": "Counters",
        "nameLocation": "673:8:11",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 891,
            "libraryName": {
              "id": 889,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1073,
              "src": "697:8:11"
            },
            "nodeType": "UsingForDirective",
            "src": "691:24:11",
            "typeName": {
              "id": 890,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "710:4:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Counters.Counter",
            "id": 894,
            "members": [
              {
                "constant": false,
                "id": 893,
                "mutability": "mutable",
                "name": "_value",
                "nameLocation": "843:6:11",
                "nodeType": "VariableDeclaration",
                "scope": 894,
                "src": "838:11:11",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 892,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "838:4:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nameLocation": "819:7:11",
            "nodeType": "StructDefinition",
            "scope": 937,
            "src": "812:45:11",
            "visibility": "public"
          },
          {
            "body": {
              "id": 905,
              "nodeType": "Block",
              "src": "988:40:11",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 902,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 897,
                      "src": "1006:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                        "typeString": "struct Counters.Counter storage pointer"
                      }
                    },
                    "id": 903,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "_value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 893,
                    "src": "1006:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 901,
                  "id": 904,
                  "nodeType": "Return",
                  "src": "999:21:11"
                }
              ]
            },
            "id": 906,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "current",
            "nameLocation": "927:7:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 897,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "951:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 906,
                  "src": "935:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 896,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 895,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 894,
                      "src": "935:7:11"
                    },
                    "referencedDeclaration": 894,
                    "src": "935:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "934:25:11"
            },
            "returnParameters": {
              "id": 901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 900,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 906,
                  "src": "982:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 899,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "982:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "981:6:11"
            },
            "scope": 937,
            "src": "918:110:11",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 918,
              "nodeType": "Block",
              "src": "1134:38:11",
              "statements": [
                {
                  "expression": {
                    "id": 916,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 912,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 909,
                        "src": "1145:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 914,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 893,
                      "src": "1145:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 915,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1163:1:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1145:19:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 917,
                  "nodeType": "ExpressionStatement",
                  "src": "1145:19:11"
                }
              ]
            },
            "id": 919,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increment",
            "nameLocation": "1090:9:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 910,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 909,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1116:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 919,
                  "src": "1100:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 908,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 907,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 894,
                      "src": "1100:7:11"
                    },
                    "referencedDeclaration": 894,
                    "src": "1100:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1099:25:11"
            },
            "returnParameters": {
              "id": 911,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1134:0:11"
            },
            "scope": 937,
            "src": "1081:91:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 935,
              "nodeType": "Block",
              "src": "1278:62:11",
              "statements": [
                {
                  "expression": {
                    "id": 933,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 925,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 922,
                        "src": "1289:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 927,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 893,
                      "src": "1289:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 931,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1330:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 928,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 922,
                            "src": "1306:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 929,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 893,
                          "src": "1306:14:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 930,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "subtract",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 989,
                        "src": "1306:23:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 932,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1306:26:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1289:43:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 934,
                  "nodeType": "ExpressionStatement",
                  "src": "1289:43:11"
                }
              ]
            },
            "id": 936,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decrement",
            "nameLocation": "1234:9:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 923,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 922,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1260:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 936,
                  "src": "1244:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 921,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 920,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 894,
                      "src": "1244:7:11"
                    },
                    "referencedDeclaration": 894,
                    "src": "1244:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$894_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1243:25:11"
            },
            "returnParameters": {
              "id": 924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1278:0:11"
            },
            "scope": 937,
            "src": "1225:115:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 938,
        "src": "665:688:11",
        "usedErrors": []
      }
    ],
    "src": "35:1318:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.15+commit.e14f2714.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-07-05T16:27:28.727Z",
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "kind": "dev",
    "methods": {},
    "title": "Counters",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}